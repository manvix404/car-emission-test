from tkinter import *
import tkinter.ttk as ttk
import datetime
import mysql.connector as msql
import smtplib
from tkinter import messagebox
from matplotlib import pyplot as pl
from reportlab.platypus import SimpleDocTemplate, Table, Paragraph, TableStyle
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet


try:
    from tkcalendar import Calendar #external module "tkCalendar"
except:
    try:
        print("Installing Calendar...")
        import pip
        import subprocess
        subprocess.check_call(["python", '-m', 'pip', 'install', 'tkcalendar'])
        print("\nCalendar Successfully installed :)")
    except:
        print("Installing pip...")
        import os
        os.system("get-pip.py")
        print("Pip succesfully installed")
        print("Installing tkcalendar...")
        import subprocess
        subprocess.check_call(["python", '-m', 'pip', 'install', 'tkcalendar'])
        print("\nCalendar Successfully installed :)")
        print("Please restart Application")



mb=messagebox
connection=msql.connect(host="localhost",user="root",passwd="user123")
crsr=connection.cursor()

try:
    crsr.execute('create database Emission')
    crsr.execute('use Emission')
except:
    crsr.execute('use Emission')
try:
    crsr.execute('create table login(username varchar(10) not null primary key,password varchar(10))')
except:
    pass
try:
    crsr.execute('create table cardetails(carname char(15),carnum varchar(10) not null primary key,prev_date char(15),dateoftest char(10),rating char,amount char(5))')
except:
    pass
try:
    crsr.execute('''create table customer(username varchar(20),name char(10),ph_num char(10),altph_num char(10) ,mail_id varchar(25),car_num varchar(50),foreign key(username) references login(username),foreign key(car_num) references cardetails(carnum))''')
except:
    pass

try:
    crsr.execute('create table receipt(dateoftest char(10),carname varchar(10),carnum varchar(10),rating char(2),amount char(5),validdate char(10),foreign key(carnum) references cardetails(carnum)')
except:
    pass

win=Tk()
def forget_grid():   #to clear all widgets from screen
    
    l=win.grid_slaves()
    for i in l:
        i.grid_forget()

def forget_pack():   #to clear all widgets from screen
    
    l=win.pack_slaves()
    for i in l:
        i.pack_forget()

def back():
        forget_pack()
        forget_grid()
        welcome(usrname)
def chars(char):
        return char.isalpha()
def num(char):
    return char.isdigit()
date_c,date_p,amt="","",0

def check_6months():
    crsr.execute('select dateoftest,mail_id from cardetails,customer')
    date_temp= crsr.fetchall()
    #print(date_temp)
    global date1
    global date2
    for  i in range(len(date_temp)):
        global cmail
        cmail=date_temp[i][1]
        year=int(date_temp[i][0][:4])                          
        #if date_temp[i][0][5]==0:
        month=int(date_temp[i][0][5])                      #needs to be 2019-8-21 form for datetime.date() to work
        #else:
            #month=int(date_temp[i][0][5:7])
        if int(date_temp[i][0][7:])>9:
            date=int(date_temp[i][0][7:])
        else:
            date=int(date_temp[i][0][7])
        date1=datetime.date(year,month,date)
        date2=date1 + datetime.timedelta(6*365/12)
        
        if date2==datetime.date.today():
            
            send_mail()


def New():

    global date_c,date_p,amt
            
    def submit_1():
        def send_mail():
            fromadd='dbmsprojekt@gmail.com'
            toadd=mail_id.get()
            
            crsr.execute("select mail_id from customer where car_num='car_num.get()'")
            # creates SMTP session
            s = smtplib.SMTP('smtp.gmail.com', 587)
  
            # start TLS for security
            s.starttls()
  
             # Authentication
            s.login("dbmsprojekt@gmail.com", "dbms@project123")
            if crsr.fetchall():
                msg = '''\
                subject:Car Emission Test
                It has come to our notice that is has been 6 months since you have last done your emission test.\n
                We suggest you get it checked at the earliest.\n
                If not checked by your local workshop within 14 days then an autogenerated mail will be sent to the higher authorities\n
                and strict action will be taken./n
                Regards,
                '''
                toadd=str(cmail)
                s.sendmail(fromadd,toadd,msg)
                s.quit()
                        
            else:
                msg='''\
                    subject:Welcome to Car Emission Test\n
                    We are glad that you could join us!\n
                    Are you satisfied with your emission test done today?'''
                  
                s.sendmail(fromadd,toadd,msg)
                s.quit()
        
                
                  
        

        
        '''def check():
            global date_p,amt
            count=0
            if name.get()=="":
                mb.showerror("Error","Enter Valid Name")
                count=count+1
            if len(ph_num.get())!=10:
                mb.showerror("Error","Enter Valid Phone number")
                count=count+1
            if ("@" or ".") not in mail_id.get() or mail_id.get()=="":
                mb.showerror("Error","Enter Valid Email ID")
                count=count+1
            if car_num.get()=="":
                mb.showerror("Error","Enter Car number")
                count=count+1
            if rate.get()=="":
                mb.showerror("Error","Enter Rate")
                count=count+1
            discount()
            if price.get()==0:
                mb.showerror("Error","Please Enter Price")
                count=count+1
            if date_c=="":
                mb.showerror("Error","Enter Date")
                count=count+1
            if date_c<date_p:
                mb.showerror("Error","Enter Proper Previously Checked Date")
                count+=1
            if date_p=="":
                date_p=date_c
            if date_c<date_p:
                mb.showerror("Error","Enter Proper Previously Checked Date")
                count+=1
            
            if count==0:
                try:
                    send_mail()
                    execute()
                except:
                    mb.showerror("Error","Not a valid mail id")'''
                 
            
        def execute():
            #(name,ph_num,altph_num,mail_id,car,car_num,rate,curr_date,prev_date )
            crsr.execute("insert into cardetails (carname,carnum,prev_date,dateoftest,rating,amount) values(%s,%s,%s,%s,%s,%s)",(car.get(),car_num.get(),date_p,date_c,rating,amt))
            connection.commit()
            crsr.execute("insert into customer (username,name,ph_num,altph_num,mail_id,car_num ) values(%s,%s,%s,%s,%s,%s)",(usrname,name.get(),ph_num.get(),altph_num.get(),mail_id.get(),car_num.get()))
            connection.commit()
            check_6months()
            crsr.execute("insert into receipt (dateoftest,carname,carnum,rating,amount,validdate) values(%s,%s,%s,%s,%s,%s)",(date_c,car.get(),car_num.get(),rating,amt,date2))
            
            in1 = Tv.insert('', 'end', text=name.get(),values=(ph_num.get(),altph_num.get(),mail_id.get(),car.get(),car_num.get(),rating,date_c,date_p,amt))
            #clear_text()
        #check()
        execute()
        send_mail()
        check_6months()
        receipt()

    def delete():
        selected_item = Tv.selection()[0] ## get selected item
        Tv.delete(selected_item)

    def date_curr():
        global date_c
        pop=Toplevel(win)
        cal=Calendar(pop,font="Ariel 14",selectmode="day")  #selectmode: change date by mouse click -- ("none","day")
        cal.pack()
        def select_date():
            global date_c
            l13=Label(f1,text=cal.selection_get(),font="Bookman 14",bg="#C3C3E5",fg="#8C489F").grid(row=6,column=3, columnspan=2)
            date_c=cal.selection_get()
            return  cal.selection_get()
        b1=Button(pop,text="Select",font="Bookman 16",command=select_date,width=20,bg="#F1F0FF",fg="#443266").pack()
        pop["bg"]="#C3C3E5"

    def date_prev():
        global date_p
        pop=Toplevel(win)
        cal=Calendar(pop,font="Bookman 14",selectmode="day")  #selectmode: change date by mouse click -- ("none","day")
        cal.pack()
        def select_date():
            global date_p
            l14=Label(f1,text=cal.selection_get(),font="Bookman 14",bg="#C3C3E5",fg="#8C489F").grid(row=7,column=3, columnspan=2)
            date_p=cal.selection_get()
            return  cal.selection_get()
        b1=Button(pop,text="Select",font="Ariel 16",command=select_date,width=20,bg="#F1F0FF",fg="#443266").pack()
        pop["bg"]="#C3C3E5"

    def clear_text():
        name.delete(0,"end") # to clear text from entry
        ph_num.delete(0,"end")
        altph_num.delete(0,"end")
        mail_id.delete(0,"end")
        car.delete(0,"end")
        car_num.delete(0,"end")
        #rate.delete(0,"end")
        #price.delete(0,"end")
        #coupon.delete(0,"end")

    def discount():
        global amt
        amt=price.get()
        cp=coupon.get()
        if cp=='xcet':
            l17=Label(f2,text="    ",font="Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=0,column=2)
            x=int(amt)-((20/100)*int(amt))
            l17=Label(f2,text="Discounted Price: "+str(x),font="Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=0,column=2)
            amt=int(x)
            return int(x)
        else:
            mb.showinfo("Warning","No coupon code has been used")
            l17=Label(f2,text="                                    ",font="Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=0,column=2)
            return amt
    def payscreen():
        def payed():
            if (len(e1.get())==16 and len(e2.get())==3):
                mb.showinfo("Success","Your transaction is completed")
                
                submit_1()
                #forget_pack()
            else:
                mb.showerror("Error","Please enter correct credit card details")
                payscreen()
                
        win1=Toplevel()
        f4=Frame(win1,bg="#C3C3E5")
        validation2=f4.register(num)
        qr=PhotoImage(file="qrcode.png")
        l1=Label(f4,image=qr)
        l1.image=qr # reference
        l1.grid(row=0,column=1,columnspan=2,pady=20)
        l=Label(f4, text="Scan above QR code to pay",font= "Bookman 14",bg="#C3C3E5",fg="#443266")
        l.grid(row=1,column=1)
        l13=Label(f4,text="         or       ",font="Bookman 14",bg="#C3C3E5",fg="#8C489F")
        l13.grid(row=3,column=1)
        l14=Label(f4,text="                  ",font="Bookman 14",bg="#C3C3E5",fg="#8C489F")
        l14.grid(row=4,column=3)
        l2=Label(f4, text="Card number",font= "Bookman 14",bg="#C3C3E5",fg="#443266")
        l2.grid(row=5,column=0)
        l3=Label(f4,text="CVV",font="Bookman 14",bg="#C3C3E5",fg="#443266")
        l3.grid(row=6,column=0)
        l4=Label(f4,text='Rs '+str(amt),font="Bookman 14",bg="#C3C3E5",fg="#443266")
        l4.grid(row=6,column=2)
        e1=Entry(f4,validate='key',validatecommand=(validation2,'%S'),width=40)
        e1.grid(row=5,column=1,columnspan=2)
        e2=Entry(f4,show="•",validate='key',validatecommand=(validation2,'%S'),width=20)
        e2.grid(row=6,column=0,columnspan=2)
        
        b1=Button(f4,text="Pay Now",command=payed, relief=GROOVE,bg="#F1F0FF",fg="#8C489F",overrelief=RAISED, width = 7, font = "Bookman 16")
        b1.grid(row=7,column=3)
        #f4.pack(pady=20)
        f4.grid(row=0,column=0,columnspan=3)
        win1.geometry('800x600')
        win1.title("Payment Portal")
        win1["bg"]="#C3C3E5"

    def getratescreen():
        def check1():
            global date_p,amt
            if name.get()=="":
                mb.showerror("Error","Enter Valid Name")
               
            if len(ph_num.get())!=10:
                mb.showerror("Error","Enter Valid Phone number")
              
            if ("@" or ".") not in mail_id.get() or mail_id.get()=="":
                mb.showerror("Error","Enter Valid Email ID")
                
            if car_num.get()=="":
                mb.showerror("Error","Enter Car number")
               
            if date_c=="":
                mb.showerror("Error","Enter Date")
                
            if date_c<date_p:
                mb.showerror("Error","Enter Proper Previously Checked Date")
               
            if date_p=="":
                date_p=date_c
            if date_c<date_p:
                mb.showerror("Error","Enter Proper Previously Checked Date")
                        
                    
        check1()           
        def emission_calc():
            global rating
            rating=int(137/(int(float(e1.get()))+int(float(e2.get()))+int(float(e3.get()))))
            
            if rating>10:
                return 10
            else:
                return rating


        def rating(ftype):
            
            #rating=8
            def cost(ctype):
                global amt
                if ctype=="2 wheeler":
                    amt=2200
                    lcost.config(text="Rs 1500")
                elif ctype=="Sedan":
                    amt=4500
                    lcost.config(text="Rs 4500")
                elif ctype=="SUV":
                    amt=5400
                    lcost.config(text="Rs 5400")
                else:
                    amt=6500
                    lcost.config(text="Rs 6500")
                    
            gas=emission_calc()
            if(ftype=="Petrol" and gas==12.4):
                lrate.config(text="car emission levels are as its expected to be")

            elif(ftype=="Petrol" and  gas<12.4):
                lrate.config(text="car emission levels are lesser than expected")

            elif(ftype=="Petrol" and  gas>12.4):
                lrate.config(text="car emission levels are higher than expected")

            elif(ftype=="Diesel" and  gas==13.6):
                lrate.config(text="car emission levels are as its expected to be")

            elif(ftype=="Diesel" and  gas<13.6):
                lrate.config(text="car emission levels are lesser than expected")

            elif(ftype=="Diesel" and  gas>13.6):
                lrate.config(text="car emission levels are higher than expected")
            lrate1.config(text=gas)
            b2=Button(win2,text="Pay Now",command=payscreen,relief=GROOVE,bg="#F1F0FF",fg="#8C489F",overrelief=RAISED, width = 15, font = "Bookman 16")
            b2.grid(row=10,column=3)
            l6=Label(f4, text="Cost",font= "Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=10,column=0)  
            lcost=Label(f4, text=" ",font= "Bookman 14",bg="#C3C3E5",fg="#443266")
            lcost.grid(row=10,column=1)
            cost(clicked2.get())
        
        options1=['Petrol','Diesel']
        options2=['2 wheeler','Sedan','SUV','Heavy Vehicle']
        clicked1=StringVar()
        clicked2=StringVar()
        clicked1.set("Petrol")
        clicked2.set("Sedan")
        win2=Toplevel()
        f4=Frame(win2,bg="#C3C3E5")
        
        
        l=Label(f4, text="Petrol/Diesel",font= "Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=0,column=0)
        drop1=OptionMenu(f4 , clicked1 , *options1 ).grid(row=0,column=1)
        drop2=OptionMenu(f4 , clicked2 , *options2 ).grid(row=1,column=1)
        l1=Label(f4, text="Enter CO2 amount",font= "Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=2,column=0)
        l2=Label(f4, text="Enter SO2 amount",font= "Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=3,column=0)
        l3=Label(f4, text="Enter NOX amount",font= "Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=4,column=0)
        l4=Label(f4, text="                        ",font= "Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=5,column=0)
        l5=Label(f4, text="Your Score is",font= "Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=6,column=0)
        lrate1=Label(f4, text=" ",font= "Bookman 14",bg="#C3C3E5",fg="#443266")
        lrate1.grid(row=6,column=1)
        lrate=Label(f4, text=" ",font= "Bookman 14",bg="#C3C3E5",fg="#443266")
        lrate.grid(row=7,column=1)
        e1=Entry(f4,width=20)
        e1.grid(row=2,column=1)
        e2=Entry(f4,width=20)
        e2.grid(row=3,column=1)
        e3=Entry(f4,width=20)
        e3.grid(row=4,column=1)
        b1=Button(win2,text="Get Emission Score",command=lambda:rating(clicked1.get()),relief=GROOVE,bg="#F1F0FF",fg="#8C489F",overrelief=RAISED, width = 15, font = "Bookman 16")
        b1.grid(row=8,column=1)
        
        f4.grid(row=0,column=0,columnspan=3)
        win2.geometry('800x600')
        win2.title("Rating Your Car")
        win2["bg"]="#C3C3E5"        
        
    def receipt():
        DATA = [[ "Date of Test" , "Vehicle Name", "Vehicle Number", "Test Rating", "Amount Paid", "Valid Till" ],
                [date1,car.get(),car_num.get(),rating,amt,date2],[ "Total", "", "","", amt],]
    #[ "Sub Total", "", "", "20,9998.00/-"],
    #[ "Discount", "", "", "-3,000.00/-"],
                
  
        # creating a Base Document Template of page size A4
        pdf = SimpleDocTemplate( "receipt.pdf" , pagesize = A4 )
          
        # standard stylesheet defined within reportlab itself
        styles = getSampleStyleSheet()
          
        # fetching the style of Top level heading (Heading1)
        title_style = styles[ "Heading1" ]
          
        # 0: left, 1: center, 2: right
        title_style.alignment = 1
          
        # creating the paragraph with 
        # the heading text and passing the styles of it
        title = Paragraph( "Car Emissus" , title_style )
          
        # creates a Table Style object and in it,
        # defines the styles row wise
        # the tuples which look like coordinates 
        # are nothing but rows and columns
        style = TableStyle(
            [
                ( "BOX" , ( 0, 0 ), ( -1, -1 ), 1 , colors.black ),
                ( "GRID" , ( 0, 0 ), ( 5 , 2 ), 1 , colors.black ),
                ( "BACKGROUND" , ( 0, 0 ), ( 5, 0 ), colors.gray ),
                ( "TEXTCOLOR" , ( 0, 0 ), ( -1, 0 ), colors.whitesmoke ),
                ( "ALIGN" , ( 0, 0 ), ( -1, -1 ), "CENTER" ),
                ( "BACKGROUND" , ( 0 , 1 ) , ( -1 , -1 ), colors.beige ),
            ]
        )
          
        # creates a table object and passes the style to it
        table = Table( DATA , style = style )
          
        # final step which builds the
        # actual pdf puting together all the elements
        pdf.build([ title , table ])
        clear_text()

          
    forget_pack()

    
        
    f1=Frame(win,bg="#C3C3E5")
    f2=Frame(f1,bg="#C3C3E5")
    l1=Label(f1,text="Customer Name*",font="Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=0,column=1)    #Courier,Impact,Tahoma,Ariel,Helvetica
    l2=Label(f1,text="Contact Number*",font="Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=1,column=1)
    l3=Label(f1,text="Alternate Number",font="Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=2,column=1)
    l4=Label(f1,text="Email*",font="Bookman 14 ",bg="#C3C3E5",fg="#443266").grid(row=3,column=1)
    l5=Label(f1,text="Car Name",font="Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=4,column=1)
    l6=Label(f1,text="Car number*",font="Bookman 14 ",bg="#C3C3E5",fg="#443266").grid(row=5,column=1)
    l7=Label(f1,text="Emission Rating*",font="Bookman 14 ",bg="#C3C3E5",fg="#443266").grid(row=9,column=1)
    l10=Label(f1,text="* Marked fields are mandatory",font="Bookman 10 ",bg="#C3C3E5",fg="#8C489F").grid(row=16,columnspan=4)
    l12=Label(f1,text="DATA ADDED",font="Bookman 14 bold",bg="#C3C3E5",fg="#8C489F").grid(row=13,columnspan=4)
    #l13=Label(f1,text="                  ",font="Bookman 14",bg="#C3C3E5",fg="#8C489F").grid(row=9,column=3)
    #l14=Label(f1,text="                  ",font="Bookman 14",bg="#C3C3E5",fg="#8C489F").grid(row=10,column=3)
    #prc=Label(f1,text="Price*",font="Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=7,column=1)
    #dsc=Label(f1,text="Discount",font="Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=8,column=1)
    l8=Label(f1,text="Date of test*",font="Bookman 14 ",bg="#C3C3E5",fg="#443266").grid(row=6,column=1)
    l9=Label(f1,text="Previously checked date",font="Bookman 14 ",bg="#C3C3E5",fg="#443266").grid(row=7,column=1)
    l17=Label(f2,text="                                    ",font="Bookman 14",bg="#C3C3E5",fg="#443266").grid(row=0,column=2)
    validation1=f1.register(chars)
    validation2=f1.register(num)
    name=Entry(f1,validate='key',validatecommand=(validation1,'%S'),width=90)
    ph_num=Entry(f1,validate='key',validatecommand=(validation2,'%S'),width=90)
    altph_num=Entry(f1,validate='key',validatecommand=(validation2,'%S'),width=90)
    mail_id=Entry(f1,width=90)
    car=Entry(f1,width=90)
    car_num=Entry(f1,width=90)
    #rate=Entry(f1,validate='key',validatecommand=(validation2,'%S'),width=90)
    #price=Entry(f1,validate='key',validatecommand=(validation2,'%S'),width=90)
    #coupon=Entry(f2,width=30)
    curr_date=Button(f1, text="Select date",font="Bookman 14",command = date_curr,width=20,bg="#F1F0FF",fg="#443266",pady=2)
    prev_date=Button(f1, text="Select date",font="Bookman 14",command = date_prev,width=20,bg="#F1F0FF",fg="#443266",pady=2)
    
    #b1=Button(f1,text="Submit",width=15, command=submit_1, relief=GROOVE,padx=10,font="Bookman 14", bg="#F1F0FF",fg="#443266",overrelief=RAISED).grid(row=11,column=2,columnspan=2,pady=7,padx=10)  #"Customer ID","Customer Name","Contact Number","Alternate Number","Email","Car Name","Car number","Emission Rating","Date of test","Previously checked date"
    b2=Button(f1,text="Back",width=25,command=back, relief=GROOVE,padx=10,font="Bookman 14",bg="#F1F0FF",fg="#443266",overrelief=RAISED).grid(row=15,column=2,pady=7,columnspan=2)
    b3=Button(f1,text="Delete",width=25,command=delete, relief=GROOVE,padx=10,font="Bookman 14",bg="#F1F0FF",fg="#443266",overrelief=RAISED).grid(row=15,column=0,pady=7,columnspan=2,padx=10)
    #b4=Button(f2,text="Apply",width=16,command=discount, relief=GROOVE,font="Bookman 14",bg="#F1F0FF",fg="#443266",overrelief=RAISED).grid(row=0,column=1,pady=2,padx=10)
    #b5=Button(f2,text="Download Receipt",width=15,command=receipt, relief=GROOVE,font="Bookman 14",bg="#F1F0FF",fg="#443266",overrelief=RAISED).grid(row=11,column=3,columnspan=2,pady=7,padx=10)
    b6=Button(f1,text="Get rating",width=15,command=getratescreen, relief=GROOVE,font="Bookman 14",bg="#F1F0FF",fg="#443266",overrelief=RAISED).grid(row=9,column=2,padx=10)
    #b7= Button(f2,text="Pay Now",width=15,command=payscreen, relief=GROOVE,font="Bookman 14",bg="#F1F0FF",fg="#443266",overrelief=RAISED).grid(row=11,column=3,padx=10)
  
    name.grid(row=0,column=2,columnspan=2)
    ph_num.grid(row=1,column=2,columnspan=2)
    altph_num.grid(row=2,column=2,columnspan=2)
    mail_id.grid(row=3,column=2,columnspan=2)
    car.grid(row=4,column=2,columnspan=2)
    car_num.grid(row=5,column=2,columnspan=2)
    #rate.grid(row=6,column=2,columnspan=2)
    curr_date.grid(row=6,column=2,pady=4)
    prev_date.grid(row=7,column=2,pady=4)
    #price.grid(row=7,column=2,columnspan=2,pady=2)
    #coupon.grid(row=0,column=0)
    

    Tv=ttk.Treeview(f1)
    Tv["columns"]=("1","2","3","4","5","6","7","8","9")
    Tv.column("#0",width=120,stretch=NO)
    Tv.column("1",width=120,stretch=NO)
    Tv.column("2",width=120,stretch=NO)
    Tv.column("3",width=180,stretch=NO)
    Tv.column("4",width=100,stretch=NO) 
    Tv.column("5",width=100,stretch=NO)
    Tv.column("6",width=100,stretch=NO)
    Tv.column("7",width=130,stretch=NO)
    Tv.column("8",width=180,stretch=NO)
    Tv.column("9",width=100,stretch=NO)
    Tv.heading("#0",text="Customer Name") #columns start from "#0"
    Tv.heading("1",text="Contact Number")
    Tv.heading("2",text="Alternate Number")
    Tv.heading("3",text="Email")
    Tv.heading("4",text="Car Name")
    Tv.heading("5",text="Car number")
    Tv.heading("6",text="Emission Rating")
    Tv.heading("7",text="Date of Test")
    Tv.heading("8",text="Previously checked date")
    Tv.heading("9",text="Price")
    Tv.grid(row=14,column=0,columnspan=4)
    f2.grid(row=8,column=2,columnspan=2)
    f1.pack(pady=10)
    

    
    
    #width=win.winfo_reqwidth()
    #height=win.winfo_reqheight()
    #widthdiff=int(win.winfo_screenwidth()/2-width/2)
    #heightdiff=int(win.winfo_screenheight()/2-height/2)
    #win.geometry("+{}+{}".format(widthdiff,heightdiff))




    
            
def Manage():

    def delete():
        selected_item = lbox.selection()[0] ## get selected item
        lbox.delete(selected_item)
        
    def insert(a):
        lbox.insert('', 'end', text=a[0],values=(a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9]))
        

    def selectItem(b):
        curItem = lbox.focus()
        return(curItem)

    def delItem():
        d=lbox.focus()
        pri_key=list(lbox.item(d).values())[2][4]
        stg1="delete from cardetails where carnum='"+str(pri_key)+"'"
        stg2="delete from customer where car_num='"+str(pri_key)+"'"
        crsr.execute(stg2)
        connection.commit()
        crsr.execute(stg1)
        connection.commit()
        Manage()

    def plot():
         crsr.execute('SELECT rating,carnum from cardetails')
         l=crsr.fetchall()  
         rates=[float(0)]
         data=[""]
         for i in range(len(l)):
       
              rates.append(float(l[i][0]))
              data.append(l[i][1])
         X=[i for i in range(len(data))]
         pl.xlabel("Car Number")
         pl.ylabel("Ratings")
         pl.title("Emission Test Review")
         pl.bar(X,rates)
         pl.xticks(X,data)
         pl.xlim(0.4,)
         pl.show()

    forget_pack()
    check_6months()
    mframe=Frame(win,bg="#C3C3E5")
    f2=Frame(mframe,bg="#C3C3E5")
    f3=Frame(mframe,bg="#C3C3E5")
    f4=Frame(mframe,bg="#C3C3E5")
    l1=Label(f2,text="DATABASE",bg="#C3C3E5",font="Bookman 14 bold",fg="#443266")#f2
    l1.pack(pady=20)
    lbox=ttk.Treeview(f2)
    vsb = ttk.Scrollbar(f2, orient="vertical", command=lbox.yview)#f2
    vsb.pack(side=RIGHT,fill=Y)
    lbox["columns"]=("1","2","3","4","5","6","7","8","9")
    lbox.column("#0",width=100,stretch=NO)
    lbox.column("1",width=100,stretch=NO)
    lbox.column("2",width=120,stretch=NO)
    lbox.column("3",width=150,stretch=NO)
    lbox.column("4",width=120,stretch=NO)
    lbox.column("5",width=120,stretch=NO)
    lbox.column("6",width=100,stretch=NO)
    lbox.column("7",width=140,stretch=NO)
    lbox.column("8",width=140,stretch=NO)
    lbox.heading("#0",text="Customer Name") #columns start from "#0"
    lbox.heading("1",text="Contact Number")
    lbox.heading("2",text="Alternate Number")
    lbox.heading("3",text="Email")
    lbox.heading("4",text="Car Name")
    lbox.heading("5",text="Car number")
    lbox.heading("6",text="Emission Rating")
    lbox.heading("7",text="Date of Test")
    lbox.heading("8",text="Previously checked date")
    lbox.heading("9",text="Price")
    lbox.pack()
    b1=Button(f3,text="Back",command=back,relief=GROOVE,width=20,font="Bookman 14",bg="#F1F0FF",fg="#443266",overrelief=RAISED)#f3
    b1.grid(row=0,column=2,padx=20,pady=5)
    b2=Button(f3,text="Plot",command=plot,relief=GROOVE,width=20,font="Bookman 14",bg="#F1F0FF",fg="#443266",overrelief=RAISED)#f3
    b2.grid(row=0,column=0,padx=20,pady=5)
    b3=Button(f3,text="Delete",command=delItem,relief=GROOVE,width=20,font="Bookman 14",bg="#F1F0FF",fg="#443266",overrelief=RAISED)
    b3.grid(column=1,padx=20,pady=5,row=0)
    lbox.bind('<ButtonRelease-1>', selectItem)
    f2.grid(row=0,column=0,columnspan=3)
    f3.grid(columnspan=3)
    f4.grid(row=2,columnspan=3)
    mframe.pack()
    # Retrieving data from SQL
    try:
        crsr.execute('create view EmissionTable as SELECT c.name,c.ph_num,c.altph_num,c.mail_id,cd.carname,cd.carnum,cd.rating,cd.dateoftest,cd.prev_date,cd.amount from customer c,cardetails cd where c.car_num=cd.carnum')
        connection.commit()
    except:
        pass
    crsr.execute('SELECT * from EmissionTable')
    user_data=crsr.fetchall()
    
    for i in user_data:
       insert(i)
   

def welcome(name=""):
    
    def lout():
        forget_pack()
        Login()
    logo=PhotoImage(file="Logo transparent.png")
    l1=Label(win,image=logo)#text="EMISSUS EXPERIOR",font="Bookman 35",bg="medium purple",fg="snow"
    b1=Button(win,text="New user",command=New, relief=GROOVE,padx=10,bg="#F1F0FF",fg="#8C489F",overrelief=RAISED,width = 23, pady=6, font = "Bookman 25")#bg grey75 fg="MediumPurple4"
    b2=Button(win,text="Management Mode",command=Manage, relief=GROOVE,bg="#F1F0FF",fg="#8C489F",padx=10,overrelief=RAISED, width = 23, pady=6, font = "Bookman 25")
    if name and name!=("user"or"User"):
        t="Hello, "+name
        l2=Label(win,text=t,font="Bookman 14",bg="#C3C3E5",fg="#443266")
    else:
        l2=Label(win,text="Hello, User",font="Bookman 14",bg="#C3C3E5",fg="#443266")
    b3=Button(win,text="Logout",command=lout, relief=GROOVE,bg="#F1F0FF",fg="#8C489F",padx=10,overrelief=RAISED, width = 20, pady=6, font = "Bookman 14")
    l1.pack(pady=40)
    l2.pack()
    b1.pack(pady=25)
    b2.pack()
    b3.pack(pady=10)
    #width=win.winfo_reqwidth()
    #height=win.winfo_reqheight()
    #widthdiff=int(win.winfo_screenwidth()/2-width/2)
    #heightdiff=int(win.winfo_screenheight()/2-height/2)
    #print(widthdiff,heightdiff)
    #win.geometry("+{}+{}".format(widthdiff,heightdiff))
    win["background"]="#C3C3E5"#medium purple#"Azure2"#"LightSteelBlue1"
    win.state("zoomed")
    #win.iconify()
    win.mainloop()
   

def Login():

    def submit():
        crsr.execute('select username,password from login')
        data=crsr.fetchall()
        if (usr.get(),pswd.get()) in data:
            forget_pack()
            global usrname
            usrname=usr.get()
            welcome(usrname)
        else:
            usr.delete(0,"end")
            pswd.delete(0,"end")
            mb.showerror("Error","Please enter valid username or password")
    def create():
        crsr.execute("select username from login")
        usrdata=crsr.fetchall()
        for i in usrdata:
            if i[0]==usr.get():
                mb.showerror("Error","Username already taken!")
                break
        print(usrdata)
        if usr.get() and pswd.get() and usr.get():
            crsr.execute('insert into login(username,password) values(%s,%s)',(usr.get(),pswd.get()))
            connection.commit()
            usr.delete(0,"end")
            pswd.delete(0,"end")
            mb.showinfo("Success","Account successfully created")
        #else:
            #mb.showerror("Error","Username already taken!")

    '''def skip():
        forget_pack()
        welcome()'''
    f3=Frame(win,bg="#C3C3E5")
    validation=f3.register(chars)
    logo1=PhotoImage(file="Logo transparent.png")
    l1=Label(f3,image=logo1)
    l1.image=logo1 # reference
    l2=Label(f3, text="Username",font= "Bookman 14",bg="#C3C3E5",fg="#443266")
    l3=Label(f3,text="Password",font="Bookman 14",bg="#C3C3E5",fg="#443266")
    usr=Entry(f3,validate='key',validatecommand=(validation,'%S'))
    pswd=Entry(f3,show="•")
    b1=Button(f3,text="Login",font= "Bookman 14",command=submit,bg="#F1F0FF",fg="#443266",width=17)
    b2=Button(f3,text="Create account",font= "Bookman 14",command=create,bg="#F1F0FF",fg="#443266",width=17)
    #b3=Button(f3,text="Skip Login",font="Bookman 14",command=skip,bg="#F1F0FF",fg="#443266",width=17)
    l1.grid(row=0,columnspan=2,pady=20)
    l2.grid(row=1,column=0)
    l3.grid(row=2,column=0)
    usr.grid(row=1,column=1)
    pswd.grid(row=2,column=1)
    b1.grid(row=3,column=1,pady=10,padx=5)
    b2.grid(row=3,column=0,pady=10,padx=5)
    #b3.grid(row=4,columnspan=2)
    f3.pack(pady=20)
    win.title("Emmissus/Emission Experior")
    win["bg"]="#C3C3E5"
    win.state("zoomed")
##    welcome()

Login()



    




